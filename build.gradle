apply plugin: 'scala'

repositories {
    mavenCentral()
}

gigaSpacesVersion = '9.6.2-9900-RELEASE'

localRepo = "$System.env.M2_REPO"
ensureDirectory(localRepo)
gsFolder = localRepo + '/com/gigaspaces/'
ensureDirectory(gsFolder)
jsHomedir = "$System.env.JSHOMEDIR"
ensureDirectory(jsHomedir)
gsScalaLibDir = jsHomedir + '/lib/platform/scala/'
ensureDirectory(gsScalaLibDir)

def ensureDirectory(String directoryPath) {
    dir = new File(directoryPath)
    if (!dir.exists())
        throw new IllegalStateException(String.format("Directory %s does not exist.", directoryPath))
    if (!dir.isDirectory())
        throw new IllegalStateException(String.format("File %s is not a directory.", directoryPath))
}

dependencies {

    compile 'org.scala-lang:scala-library:2.10.3'

    compile 'org.slf4j:slf4j-api:1.7.5'
    compile 'ch.qos.logback:logback-classic:1.0.13'

    compile files(gsFolder + 'gs-openspaces/' + gigaSpacesVersion + '/gs-openspaces-' + gigaSpacesVersion + '.jar')
    compile files(gsFolder + 'gs-runtime/' + gigaSpacesVersion + '/gs-runtime-' + gigaSpacesVersion + '.jar')
    compile files(gsScalaLibDir + 'gs-openspaces-scala.jar')

    testCompile 'org.scalatest:scalatest_2.10:2.0'
    testCompile 'org.scalamock:scalamock-scalatest-support_2.10:3.0.1'
    testCompile 'org.scalamock:scalamock-specs2-support_2.10:3.0.1'
    testCompile 'junit:junit:4.11'

    // GS REQUIRED LIBS
    testCompile 'org.springframework:spring-aop:3.1.3.RELEASE'
    testCompile 'org.springframework:spring-aspects:3.1.3.RELEASE'
    testCompile 'org.springframework:spring-beans:3.1.3.RELEASE'
    testCompile 'org.springframework:spring-context:3.1.3.RELEASE'
    testCompile 'org.springframework:spring-context-support:3.1.3.RELEASE'
    testCompile 'org.springframework:spring-core:3.1.3.RELEASE'
    testCompile 'org.springframework:spring-expression:3.1.3.RELEASE'
    testCompile 'org.springframework:spring-tx:3.1.3.RELEASE'
    testCompile 'commons-logging:commons-logging:1.1.3'
    testCompile 'aopalliance:aopalliance:1.0'

}

tasks.withType(ScalaCompile) {
    configure(scalaCompileOptions.forkOptions) {
        memoryMaximumSize = '4g'
        jvmArgs = ['-XX:MaxPermSize=512m']
    }
    scalaCompileOptions.useAnt = false
    scalaCompileOptions.setAdditionalParameters(['-feature'])
}

test{
    systemProperty 'com.gs.protectiveMode.typeWithoutId', 'false'
}

task test(overwrite: true, dependsOn: testClasses) << {
    ant.taskdef(name: 'scalatest', classname: 'org.scalatest.tools.ScalaTestAntTask' , classpath: sourceSets.test.runtimeClasspath.asPath)
    ant.scalatest(runpath: sourceSets.test.output.classesDir, haltonfailure: 'true', fork: 'false') {
        jvmarg(value:'-Dcom.gs.protectiveMode.typeWithoutId=true')
        reporter(type: 'stdout')
    }
}
